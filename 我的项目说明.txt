   编写优秀的面向对象代码并不是一件容易的事情，优秀的OO代码如行云流水，糟糕的OO代码让人觉
得浑身起鸡皮疙瘩。编写优秀的OO代码要求程序员有一定的自我修养，能够以抽象的思路看待问题，找
到问题的核心并对问题域进行分解。它强调的是一种解题的思路，但这个解不是唯一的。
　典型的例子是设计模式，设计模式确实给了我们以很大的启发，通过它，我们能够了解到优秀的代
码是如何用于解决实际问题的。但是是不是你必须在软件中照搬设计模式呢？如果你这么做，那么你对
设计模式的理解仍然不够。我曾和在建筑行业的朋友聊起Christopher Alexander的建筑的永恒之道。他
很兴奋的告诉我，那确实是一本很好的书，能够引发人很深的思考，但是现在也有另外的一种观点，认
为美仍然是无形的，应该发自建筑师的内心。对这句话我思考了很久，其实建筑是给人使用的，因此最
重要的是它能都给人带来的价值，隐含在其中的那种活生生的气质，这是建筑师文化底蕴的外在表露。
所以，Christopher Alexander在那本书中的目的，也是为了找到一种总结自己观点的方法，来总结自己
对人文的认识。至于现在大家对他的思路提出了质疑，那也是一件好事，这说明大家对建筑之道的认识
到了新的高度。
普通的软件开发过程和面向对象开发过程有着很大的不同。回想我们在非面向对象中开发过程中，最经
常采用的任务分配方法就是以软件模块为单位，这样的好处是分配简单，不同任务之间耦合程度低，容
易操作。
坏处是几乎无法做到重用，也缺乏整体性的设计。而面向对象软件开发则不同，它是以类、类集合作为
基本单位的。类之间关系错综复杂（虽然我们提倡低耦合的设计，但类之间的关系仍然是相对复杂的）。

1、敲代码前的构思必须要做好。比起敲代码，更重要的是敲代码前的构思。这体现了一个程序的灵魂。
这个系统需要几个类？这几个类之间什么联系？需要怎么储存数据？继承和组合如何使用？只有先构思
好这几个问题，敲出来的代码才会有自己的思想。
2、边写边调试。写程序切忌写完再调试。这不仅会出现成千上百的错误，改还没法改。一定要写完一个
功能就进行调试。
3、注意封装与简化。越长的代码不一定是越好的代码。只有时刻注意代码的简化，才是效率高的程序。
4、数据的真实性。很多人不注意数据的真实性，这往往会直接造成代码的问题。毕竟系统是给真实的人
使用的。因此我们要注意使用真实的数据。

this is a file
