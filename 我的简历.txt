    软件的开发过程就象是一部精密的机器，任何一个环节的变化，都会对其它的环节产生影响。把软件
过程按照瀑布的形式进行划分是一种分解的处理思路，但同时我们还应该看到不同活动之间的相互影响。
软件开发中的生命周期模型也是一个层次模型，从业务建模一直到软件实现，需要跨越数个层次，同样
会出现执行不力的情况，例如，代码设计偏离需求、偏离设计的情况比比皆是。如何避免这种情况呢？
这就需要我们从源代码的角度，反思其上游的实践活动，是否足以约束代码设计？就拿XP来说，他解决
这个问题的方式是尽快的进入代码开发阶段，从代码开发中发现问题，并在下一轮的开发中解决。这种
思路是正确的，但XP毕竟是方**，他不会告诉你过于细节的东西，尽管XP已经提供了大量面向代码的实
践。因为方**的抽象级别比较高，使得他必须舍弃部分的细节。需要在代码中加入对异常的处理，那么，
异常的源头在哪里呢？是需求，在需求中，我们发现了一些业务的非正常的处理序列，发现了一些业务
实体的限制性的要求，所以在代码实现中，就需要有相应的异常处理。在例如，一个优秀的异常处理，
还需要让客户端程序员了解可能发生的异常，以保证不同代码间正确的集成。
