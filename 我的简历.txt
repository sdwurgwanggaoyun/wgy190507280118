    软件的开发过程就象是一部精密的机器，任何一个环节的变化，都会对其它的环节产生影响。把软件
过程按照瀑布的形式进行划分是一种分解的处理思路，但同时我们还应该看到不同活动之间的相互影响。
软件开发中的生命周期模型也是一个层次模型，从业务建模一直到软件实现，需要跨越数个层次，同样
会出现执行不力的情况，例如，代码设计偏离需求、偏离设计的情况比比皆是。如何避免这种情况呢？
这就需要我们从源代码的角度，反思其上游的实践活动，是否足以约束代码设计？就拿XP来说，他解决
这个问题的方式是尽快的进入代码开发阶段，从代码开发中发现问题，并在下一轮的开发中解决。这种
思路是正确的，但XP毕竟是方**，他不会告诉你过于细节的东西，尽管XP已经提供了大量面向代码的实
践。因为方**的抽象级别比较高，使得他必须舍弃部分的细节。需要在代码中加入对异常的处理，那么，
异常的源头在哪里呢？是需求，在需求中，我们发现了一些业务的非正常的处理序列，发现了一些业务
实体的限制性的要求，所以在代码实现中，就需要有相应的异常处理。在例如，一个优秀的异常处理，
还需要让客户端程序员了解可能发生的异常，以保证不同代码间正确的集成。
面向对象的代码已经在现在的软件开发中占据了主流的位置，面向对象的思路也有其优势所在，就像后
文所讨论的，面向对象代码有着非面向对象代码的很多优势，而软件业中很多新的思潮的产生，也都是
基于面向对象语言的，所以我们关注的代码将是面向对象代码。
　面向对象的思想来自于抽象数据类型。对于面向对象来说，它最重要的改进就是把世间万物都描述为
对象，而类则描述了同一种对象的特征，而不是像传统的开发方法那样，按照机器指令的执行顺序来进
行设计。当然，面向对象代码最终仍然是要按照时序来执行的，但是从程序员的角度看来，面向对象代
码更侧重于对象之间的交互，多个对象各司其职，相互协作以完成目标。而面向对象技术的发展，也是
朝着更加贴近我们世界观的方向发展。从这点来看，有人说完全没有程序设计经验的人学习面向对象可
能会更加的容易，因为他不需要从原先的时序程序的桎梏中摆脱出来，但这未必是事实。面向对象决不
是一种简单的程序设计思路。这是我们的观点，也会在下文中反复的论证。

